package com.netspi.awssigner.view;

import com.netspi.awssigner.log.LogWriter;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.regex.Pattern;
import javax.swing.border.EtchedBorder;

/**
 * This should be the dumb View logic. This should only be interacted with via
 * the Controller.
 */
public class BurpTabPanel extends javax.swing.JPanel {

    /**
     * Creates new form RootTabPanel
     */
    public BurpTabPanel() {
        initComponents();
        BurpUIComponentCustomizer.applyBurpStyling(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        globalSettingsPanel = new javax.swing.JPanel();
        globalSettingsLabel = new javax.swing.JLabel();
        globalSettingsDescriptionLabel = new javax.swing.JLabel();
        signingEnabledCheckbox = new javax.swing.JCheckBox();
        alwaysSignWithProfileLabel = new javax.swing.JLabel();
        alwaysSignWithProfileComboBox = new javax.swing.JComboBox<>();
        logLevelLabel = new javax.swing.JLabel();
        logLevelComboBox = new javax.swing.JComboBox<>();
        globalSettingsSeparator = new javax.swing.JSeparator();
        profileManagementLabel = new javax.swing.JLabel();
        profileManagementDescriptionLabel = new javax.swing.JLabel();
        addProfileButton = new javax.swing.JButton();
        deleteProfileButton = new javax.swing.JButton();
        copyProfileButton = new javax.swing.JButton();
        importProfilesButton = new javax.swing.JButton();
        exportProfilesButton = new javax.swing.JButton();
        profileListScrollPane = new javax.swing.JScrollPane();
        profileList = new javax.swing.JList<>();
        rightSideParentPanel = new javax.swing.JPanel();
        profileConfigurationScrollPane = new javax.swing.JScrollPane();
        profileConfigurationPanel = new javax.swing.JPanel();
        profileConfigurationLabel = new javax.swing.JLabel();
        profileNameLabel = new javax.swing.JLabel();
        profileStatusLabel = new javax.swing.JLabel();
        profileStatusTextLabel = new javax.swing.JLabel();
        profileEnabledCheckbox = new javax.swing.JCheckBox();
        profileInScopeOnlyCheckbox = new javax.swing.JCheckBox();
        profileRegionLabel = new javax.swing.JLabel();
        profileRegionTextField = new FormattedHintTextField(false);
        profileServiceLabel = new javax.swing.JLabel();
        profileServiceTextField = new FormattedHintTextField(false);
        profileKeyIdLabel = new javax.swing.JLabel();
        profileKeyIdTextField = new FormattedHintTextField(false, Pattern.compile(".+"));
        testProfileButton = new javax.swing.JButton();
        credentialCardContainerPanel = new javax.swing.JPanel();
        staticCredentialsPanel = new javax.swing.JPanel();
        staticCredentialsConfigurationLabel = new javax.swing.JLabel();
        staticAccessKeyLabel = new javax.swing.JLabel();
        staticAccessKeyTextField = new FormattedHintTextField(true, Pattern.compile("[A-Z0-9]{20,}"));
        staticSecretKeyLabel = new javax.swing.JLabel();
        staticSecretKeyTextField = new FormattedHintTextField(true, Pattern.compile("[A-Za-z0-9/+=]{40,}"));
        staticSessionTokenLabel = new javax.swing.JLabel();
        staticSessionTokenTextField = new FormattedHintTextField(false);
        assumeRolePanel = new javax.swing.JPanel();
        assumeRoleConfigurationLabel = new javax.swing.JLabel();
        assumeRoleAssumerProfileLabel = new javax.swing.JLabel();
        assumeRoleAssumerProfileComboBox = new javax.swing.JComboBox<>();
        assumeRoleRoleArnLabel = new javax.swing.JLabel();
        assumeRoleRoleArnTextField = new FormattedHintTextField(true, Pattern.compile("arn:.+:iam::[0-9]{12}:role/.+"));
        assumeRoleSessionNameLabel = new javax.swing.JLabel();
        assumeRoleSessionNameTextField = new FormattedHintTextField(false);
        assumeRoleExternalIdLabel = new javax.swing.JLabel();
        assumeRoleExternalIdTextField = new FormattedHintTextField(false);
        assumeRoleDurationLabel = new javax.swing.JLabel();
        assumeRoleDurationTextField = new FormattedHintTextField(false, Pattern.compile("\\d+"));
        assumeRoleSessionPolicyPanel = new javax.swing.JPanel();
        assumeRoleSessionPolicyConfigurationLabel = new javax.swing.JLabel();
        assumeRoleSessionPolicyDescriptionLabel = new javax.swing.JLabel();
        assumeRoleSessionPolicyScrollPane = new javax.swing.JScrollPane();
        assumeRoleSessionPolicyTextArea = new javax.swing.JTextArea();
        assumeRoleSessionPolicyPrettifyButton = new javax.swing.JButton();
        assumeRoleSessionPolicyRegexField = new javax.swing.JTextField();
        assumeRoleSessionPolicyReplacementField = new javax.swing.JTextField();
        assumeRoleSessionPolicyFindButton = new javax.swing.JButton();
        assumeRoleSessionPolicyReplaceButton = new javax.swing.JButton();
        assumeRoleSessionPolicyReplaceAllButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        commandPanel = new javax.swing.JPanel();
        commandConfigurationLabel = new javax.swing.JLabel();
        commandConfigurationDescriptionLabel = new javax.swing.JLabel();
        commandCommandLabel = new javax.swing.JLabel();
        commandCommandTextField = new FormattedHintTextField(true);
        commandDurationLabel = new javax.swing.JLabel();
        commandDurationTextField = new FormattedHintTextField(false, Pattern.compile("\\d+"));
        commandExtractedSectionLabel = new javax.swing.JLabel();
        commandExtractedSectionDescriptionLabel = new javax.swing.JLabel();
        commandExtractedAccessKeyLabel = new javax.swing.JLabel();
        commandExtractedAccessKeyTextField = new FormattedHintTextField(false);
        commandExtractedSecretKeyLabel = new javax.swing.JLabel();
        commandExtractedSecretKeyTextField = new FormattedHintTextField(false);
        commandExtractedSessionTokenLabel = new javax.swing.JLabel();
        commandExtractedSessionTokenTextField = new FormattedHintTextField(false);

        setName("topPanel"); // NOI18N
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        globalSettingsLabel.setFont(globalSettingsLabel.getFont().deriveFont(globalSettingsLabel.getFont().getStyle() | java.awt.Font.BOLD, 15));
        globalSettingsLabel.setForeground(new java.awt.Color(255, 102, 51));
        globalSettingsLabel.setText("Global Settings");

        globalSettingsDescriptionLabel.setFont(globalSettingsDescriptionLabel.getFont());
        globalSettingsDescriptionLabel.setText("<html>Change extension behavior. Set <i>Always Sign With</i> to force signing of all requests with the specified profile credentials.");
        globalSettingsDescriptionLabel.putClientProperty("html.disable", null);

        signingEnabledCheckbox.setFont(signingEnabledCheckbox.getFont());
        signingEnabledCheckbox.setSelected(true);
        signingEnabledCheckbox.setText("Signing Enabled");
        signingEnabledCheckbox.setToolTipText("Enable/Disable request signing globally");
        signingEnabledCheckbox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        alwaysSignWithProfileLabel.setFont(alwaysSignWithProfileLabel.getFont());
        alwaysSignWithProfileLabel.setLabelFor(alwaysSignWithProfileComboBox);
        alwaysSignWithProfileLabel.setText("Always Sign With:");
        alwaysSignWithProfileLabel.setToolTipText("Sign all requests with the selected profile");

        alwaysSignWithProfileComboBox.setFont(alwaysSignWithProfileComboBox.getFont());
        alwaysSignWithProfileComboBox.setToolTipText("Sign all requests with the selected profile");

        logLevelLabel.setFont(logLevelLabel.getFont());
        logLevelLabel.setLabelFor(logLevelComboBox);
        logLevelLabel.setText("Log Level");
        logLevelLabel.setToolTipText("Set the extension's logging verbosity");

        logLevelComboBox.setFont(logLevelComboBox.getFont());
        logLevelComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Error", "Info", "Debug" }));
        logLevelComboBox.setToolTipText("Set the extension's logging verbosity");

        javax.swing.GroupLayout globalSettingsPanelLayout = new javax.swing.GroupLayout(globalSettingsPanel);
        globalSettingsPanel.setLayout(globalSettingsPanelLayout);
        globalSettingsPanelLayout.setHorizontalGroup(
            globalSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(globalSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(globalSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(globalSettingsLabel)
                    .addGroup(globalSettingsPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(globalSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(globalSettingsDescriptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(globalSettingsPanelLayout.createSequentialGroup()
                                .addComponent(signingEnabledCheckbox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(alwaysSignWithProfileLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(alwaysSignWithProfileComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(logLevelLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(logLevelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(248, 391, Short.MAX_VALUE))
            .addComponent(globalSettingsSeparator)
        );
        globalSettingsPanelLayout.setVerticalGroup(
            globalSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(globalSettingsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(globalSettingsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(globalSettingsDescriptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(globalSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(signingEnabledCheckbox)
                    .addComponent(alwaysSignWithProfileLabel)
                    .addComponent(alwaysSignWithProfileComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(logLevelLabel)
                    .addComponent(logLevelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(globalSettingsSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8))
        );

        profileManagementLabel.setFont(profileManagementLabel.getFont().deriveFont(profileManagementLabel.getFont().getStyle() | java.awt.Font.BOLD, 15));
        profileManagementLabel.setForeground(new java.awt.Color(255, 102, 51));
        profileManagementLabel.setText("Profile Management");

        profileManagementDescriptionLabel.setFont(profileManagementDescriptionLabel.getFont());
        profileManagementDescriptionLabel.setText("Manage profiles which provide AWS credentials");

        addProfileButton.setFont(addProfileButton.getFont());
        addProfileButton.setText("Add");
        addProfileButton.setToolTipText("Add a new profile");

        deleteProfileButton.setFont(deleteProfileButton.getFont());
        deleteProfileButton.setText("Delete");
        deleteProfileButton.setToolTipText("Delete the currently selected profile");

        copyProfileButton.setFont(copyProfileButton.getFont());
        copyProfileButton.setText("Copy");
        copyProfileButton.setToolTipText("Copy the currently selected profile");

        importProfilesButton.setFont(importProfilesButton.getFont());
        importProfilesButton.setText("Import");
        importProfilesButton.setToolTipText("Import profiles from disk or environment variables");

        exportProfilesButton.setFont(exportProfilesButton.getFont());
        exportProfilesButton.setText("Export");
        exportProfilesButton.setToolTipText("Export configured profiles");

        profileList.setFont(profileList.getFont());
        profileList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        profileListScrollPane.setViewportView(profileList);

        profileConfigurationScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        profileConfigurationLabel.setFont(profileConfigurationLabel.getFont().deriveFont(profileConfigurationLabel.getFont().getStyle() | java.awt.Font.BOLD, 15));
        profileConfigurationLabel.setForeground(new java.awt.Color(255, 102, 51));
        profileConfigurationLabel.setText("Profile Configuration:");

        profileNameLabel.setFont(profileNameLabel.getFont().deriveFont(profileNameLabel.getFont().getStyle() | java.awt.Font.BOLD, 15));
        profileNameLabel.setText("[Add A Profile To Begin]");

        profileStatusLabel.setFont(profileStatusLabel.getFont().deriveFont(profileStatusLabel.getFont().getStyle() | java.awt.Font.BOLD, profileStatusLabel.getFont().getSize()+1));
        profileStatusLabel.setText("Status:");

        profileStatusTextLabel.setFont(profileStatusTextLabel.getFont().deriveFont(profileStatusTextLabel.getFont().getSize()+1f));
        profileStatusTextLabel.setText("Must add profile to begin editing");

        profileEnabledCheckbox.setFont(profileEnabledCheckbox.getFont().deriveFont(profileEnabledCheckbox.getFont().getStyle() | java.awt.Font.BOLD, profileEnabledCheckbox.getFont().getSize()+1));
        profileEnabledCheckbox.setSelected(true);
        profileEnabledCheckbox.setText("Enabled");
        profileEnabledCheckbox.setToolTipText("Enables/Disables this profile");
        profileEnabledCheckbox.setEnabled(false);
        profileEnabledCheckbox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        profileEnabledCheckbox.setMargin(new java.awt.Insets(2, 0, 2, 2));

        profileInScopeOnlyCheckbox.setFont(profileInScopeOnlyCheckbox.getFont().deriveFont(profileInScopeOnlyCheckbox.getFont().getStyle() | java.awt.Font.BOLD, profileInScopeOnlyCheckbox.getFont().getSize()+1));
        profileInScopeOnlyCheckbox.setText("In-Scope Only");
        profileInScopeOnlyCheckbox.setToolTipText("When checked, only in-scope requests are signed with this profile");
        profileInScopeOnlyCheckbox.setEnabled(false);
        profileInScopeOnlyCheckbox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        profileInScopeOnlyCheckbox.setMargin(new java.awt.Insets(2, 0, 2, 2));

        profileRegionLabel.setFont(profileRegionLabel.getFont().deriveFont(profileRegionLabel.getFont().getStyle() | java.awt.Font.BOLD, profileRegionLabel.getFont().getSize()+1));
        profileRegionLabel.setLabelFor(profileRegionTextField);
        profileRegionLabel.setText("Region:");

        profileRegionTextField.setFont(profileRegionTextField.getFont());
        profileRegionTextField.setToolTipText("If set, this will be the region set for all signed requests, overriding the value in the original request");
        profileRegionTextField.setEnabled(false);

        profileServiceLabel.setFont(profileServiceLabel.getFont().deriveFont(profileServiceLabel.getFont().getStyle() | java.awt.Font.BOLD, profileServiceLabel.getFont().getSize()+1));
        profileServiceLabel.setLabelFor(profileServiceTextField);
        profileServiceLabel.setText("Service:");

        profileServiceTextField.setFont(profileServiceTextField.getFont());
        profileServiceTextField.setToolTipText("If set, this will be the service set for all signed requests, overriding the value in the original request");
        profileServiceTextField.setEnabled(false);

        profileKeyIdLabel.setFont(profileKeyIdLabel.getFont().deriveFont(profileKeyIdLabel.getFont().getStyle() | java.awt.Font.BOLD, profileKeyIdLabel.getFont().getSize()+1));
        profileKeyIdLabel.setLabelFor(profileKeyIdTextField);
        profileKeyIdLabel.setText("Key Id:");

        profileKeyIdTextField.setFont(profileKeyIdTextField.getFont());
        profileKeyIdTextField.setToolTipText("If set, this profile will sign all requests which were originally signed with this Key Id. The request will be resigned with the configuration below");
        profileKeyIdTextField.setEnabled(false);

        testProfileButton.setFont(testProfileButton.getFont().deriveFont(testProfileButton.getFont().getStyle() | java.awt.Font.BOLD, testProfileButton.getFont().getSize()+1));
        testProfileButton.setText("Test Profile Credentials");
        testProfileButton.setToolTipText("Tests the credential configuration below and updates this profile's status with the results");
        testProfileButton.setEnabled(false);

        credentialCardContainerPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(EtchedBorder.RAISED));
        credentialCardContainerPanel.setLayout(new java.awt.CardLayout());

        staticCredentialsPanel.setName(""); // NOI18N

        staticCredentialsConfigurationLabel.setFont(staticCredentialsConfigurationLabel.getFont().deriveFont(staticCredentialsConfigurationLabel.getFont().getStyle() | java.awt.Font.BOLD, 15));
        staticCredentialsConfigurationLabel.setForeground(new java.awt.Color(255, 102, 51));
        staticCredentialsConfigurationLabel.setText("Static Credentials Configuration");

        staticAccessKeyLabel.setFont(staticAccessKeyLabel.getFont().deriveFont(staticAccessKeyLabel.getFont().getStyle() | java.awt.Font.BOLD, staticAccessKeyLabel.getFont().getSize()+1));
        staticAccessKeyLabel.setLabelFor(staticAccessKeyTextField);
        staticAccessKeyLabel.setText("Access Key:");
        staticAccessKeyLabel.setToolTipText("The access key of the credentials");

        staticAccessKeyTextField.setToolTipText("The access key to sign requests");
        staticAccessKeyTextField.setEnabled(false);

        staticSecretKeyLabel.setFont(staticSecretKeyLabel.getFont().deriveFont(staticSecretKeyLabel.getFont().getStyle() | java.awt.Font.BOLD, staticSecretKeyLabel.getFont().getSize()+1));
        staticSecretKeyLabel.setLabelFor(staticSecretKeyTextField);
        staticSecretKeyLabel.setText("Secret Key:");
        staticSecretKeyLabel.setToolTipText("The secret key of the credentials.");

        staticSecretKeyTextField.setToolTipText("The secret key to sign requests");
        staticSecretKeyTextField.setEnabled(false);

        staticSessionTokenLabel.setFont(staticSessionTokenLabel.getFont().deriveFont(staticSessionTokenLabel.getFont().getStyle() | java.awt.Font.BOLD, staticSessionTokenLabel.getFont().getSize()+1));
        staticSessionTokenLabel.setLabelFor(staticSessionTokenTextField);
        staticSessionTokenLabel.setText("Session Token:");
        staticSessionTokenLabel.setToolTipText("The optional session token of the credentials.");

        staticSessionTokenTextField.setToolTipText("The optional session token to sign requests");
        staticSessionTokenTextField.setEnabled(false);

        javax.swing.GroupLayout staticCredentialsPanelLayout = new javax.swing.GroupLayout(staticCredentialsPanel);
        staticCredentialsPanel.setLayout(staticCredentialsPanelLayout);
        staticCredentialsPanelLayout.setHorizontalGroup(
            staticCredentialsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(staticCredentialsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(staticCredentialsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(staticCredentialsConfigurationLabel)
                    .addGroup(staticCredentialsPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(staticCredentialsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(staticSessionTokenLabel)
                            .addComponent(staticSecretKeyLabel)
                            .addComponent(staticAccessKeyLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(staticCredentialsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(staticSecretKeyTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE)
                            .addComponent(staticSessionTokenTextField)
                            .addComponent(staticAccessKeyTextField, javax.swing.GroupLayout.Alignment.LEADING))))
                .addContainerGap(785, Short.MAX_VALUE))
        );
        staticCredentialsPanelLayout.setVerticalGroup(
            staticCredentialsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(staticCredentialsPanelLayout.createSequentialGroup()
                .addComponent(staticCredentialsConfigurationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(staticCredentialsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(staticAccessKeyLabel)
                    .addComponent(staticAccessKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(staticCredentialsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(staticSecretKeyLabel)
                    .addComponent(staticSecretKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(staticCredentialsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(staticSessionTokenLabel)
                    .addComponent(staticSessionTokenTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        credentialCardContainerPanel.add(staticCredentialsPanel, "static_credentials_card");

        assumeRolePanel.setName(""); // NOI18N

        assumeRoleConfigurationLabel.setFont(assumeRoleConfigurationLabel.getFont().deriveFont(assumeRoleConfigurationLabel.getFont().getStyle() | java.awt.Font.BOLD, 15));
        assumeRoleConfigurationLabel.setForeground(new java.awt.Color(255, 102, 51));
        assumeRoleConfigurationLabel.setText("AssumeRole Configuration");

        assumeRoleAssumerProfileLabel.setFont(assumeRoleAssumerProfileLabel.getFont().deriveFont(assumeRoleAssumerProfileLabel.getFont().getStyle() | java.awt.Font.BOLD, assumeRoleAssumerProfileLabel.getFont().getSize()+1));
        assumeRoleAssumerProfileLabel.setLabelFor(assumeRoleAssumerProfileComboBox);
        assumeRoleAssumerProfileLabel.setText("Assumer Profile:");
        assumeRoleAssumerProfileLabel.setToolTipText("Set the profile which assume the specified role");

        assumeRoleAssumerProfileComboBox.setFont(assumeRoleAssumerProfileComboBox.getFont());
        assumeRoleAssumerProfileComboBox.setToolTipText("Set the profile which will be used to assume the role specified below");

        assumeRoleRoleArnLabel.setFont(assumeRoleRoleArnLabel.getFont().deriveFont(assumeRoleRoleArnLabel.getFont().getStyle() | java.awt.Font.BOLD, assumeRoleRoleArnLabel.getFont().getSize()+1));
        assumeRoleRoleArnLabel.setLabelFor(assumeRoleRoleArnTextField);
        assumeRoleRoleArnLabel.setText("Role ARN:");
        assumeRoleRoleArnLabel.setToolTipText("The role to be assumed");

        assumeRoleRoleArnTextField.setFont(assumeRoleRoleArnTextField.getFont());
        assumeRoleRoleArnTextField.setToolTipText("The role to be assumed. This role's trust policy must trust the \"Assumer Profile\" to assume this role");

        assumeRoleSessionNameLabel.setFont(assumeRoleSessionNameLabel.getFont().deriveFont(assumeRoleSessionNameLabel.getFont().getStyle() | java.awt.Font.BOLD, assumeRoleSessionNameLabel.getFont().getSize()+1));
        assumeRoleSessionNameLabel.setLabelFor(assumeRoleSessionNameTextField);
        assumeRoleSessionNameLabel.setText("Session Name:");
        assumeRoleSessionNameLabel.setToolTipText("An identifier for the assumed role session.");

        assumeRoleSessionNameTextField.setFont(assumeRoleSessionNameTextField.getFont());
        assumeRoleSessionNameTextField.setToolTipText("An identifier for the assumed role session.");

        assumeRoleExternalIdLabel.setFont(assumeRoleExternalIdLabel.getFont().deriveFont(assumeRoleExternalIdLabel.getFont().getStyle() | java.awt.Font.BOLD, assumeRoleExternalIdLabel.getFont().getSize()+1));
        assumeRoleExternalIdLabel.setLabelFor(assumeRoleExternalIdTextField);
        assumeRoleExternalIdLabel.setText("External Id:");
        assumeRoleExternalIdLabel.setToolTipText("A unique identifier that might be required when you assume a role in another account.");

        assumeRoleExternalIdTextField.setFont(assumeRoleExternalIdTextField.getFont());
        assumeRoleExternalIdTextField.setToolTipText("A unique identifier that may be required when you assume the role.");

        assumeRoleDurationLabel.setFont(assumeRoleDurationLabel.getFont().deriveFont(assumeRoleDurationLabel.getFont().getStyle() | java.awt.Font.BOLD, assumeRoleDurationLabel.getFont().getSize()+1));
        assumeRoleDurationLabel.setLabelFor(assumeRoleDurationTextField);
        assumeRoleDurationLabel.setText("Duration (Seconds):");
        assumeRoleDurationLabel.setToolTipText("The lifetime of the session. The credentials will be renewed as required.");

        assumeRoleDurationTextField.setFont(assumeRoleDurationTextField.getFont());
        assumeRoleDurationTextField.setToolTipText("The lifetime of the session. The credentials will be renewed as required.");

        assumeRoleSessionPolicyConfigurationLabel.setFont(assumeRoleSessionPolicyConfigurationLabel.getFont().deriveFont(assumeRoleSessionPolicyConfigurationLabel.getFont().getStyle() | java.awt.Font.BOLD, 15));
        assumeRoleSessionPolicyConfigurationLabel.setForeground(new java.awt.Color(255, 102, 51));
        assumeRoleSessionPolicyConfigurationLabel.setText("Session Policy Configuration");

        assumeRoleSessionPolicyDescriptionLabel.setFont(assumeRoleSessionPolicyDescriptionLabel.getFont());
        assumeRoleSessionPolicyDescriptionLabel.setText("<html> The session policy is an <b>optional</b> IAM policy which further <b>restricts</b> the permissions of the assumed role. The permissions for a session are the intersection of the identity-based policies for the IAM role used to create the session and the session policy.");
        assumeRoleSessionPolicyDescriptionLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        assumeRoleSessionPolicyDescriptionLabel.putClientProperty("html.disable", null);

        assumeRoleSessionPolicyTextArea.setColumns(20);
        assumeRoleSessionPolicyTextArea.setRows(5);
        assumeRoleSessionPolicyScrollPane.setViewportView(assumeRoleSessionPolicyTextArea);

        assumeRoleSessionPolicyPrettifyButton.setFont(assumeRoleSessionPolicyPrettifyButton.getFont());
        assumeRoleSessionPolicyPrettifyButton.setText("Prettify");
        assumeRoleSessionPolicyPrettifyButton.setToolTipText("Attempt to format the session policy.");

        assumeRoleSessionPolicyRegexField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        assumeRoleSessionPolicyRegexField.setToolTipText("Enter a regex pattern to search for matches in the text area.");
        assumeRoleSessionPolicyRegexField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assumeRoleSessionPolicyRegexFieldActionPerformed(evt);
            }
        });

        assumeRoleSessionPolicyReplacementField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        assumeRoleSessionPolicyReplacementField.setToolTipText("Provide the replacement text for the matched pattern(s).");
        assumeRoleSessionPolicyReplacementField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assumeRoleSessionPolicyReplacementFieldActionPerformed(evt);
            }
        });

        assumeRoleSessionPolicyFindButton.setText("Find All");
        assumeRoleSessionPolicyFindButton.setActionCommand("Find All");

        assumeRoleSessionPolicyReplaceButton.setText("Replace");
        assumeRoleSessionPolicyReplaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assumeRoleSessionPolicyReplaceButtonActionPerformed(evt);
            }
        });

        assumeRoleSessionPolicyReplaceAllButton.setText("Replace All");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Find");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Replace");

        javax.swing.GroupLayout assumeRoleSessionPolicyPanelLayout = new javax.swing.GroupLayout(assumeRoleSessionPolicyPanel);
        assumeRoleSessionPolicyPanel.setLayout(assumeRoleSessionPolicyPanelLayout);
        assumeRoleSessionPolicyPanelLayout.setHorizontalGroup(
            assumeRoleSessionPolicyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(assumeRoleSessionPolicyPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(assumeRoleSessionPolicyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(assumeRoleSessionPolicyConfigurationLabel)
                    .addComponent(assumeRoleSessionPolicyDescriptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 680, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(assumeRoleSessionPolicyPrettifyButton)
                    .addGroup(assumeRoleSessionPolicyPanelLayout.createSequentialGroup()
                        .addComponent(assumeRoleSessionPolicyScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 680, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(assumeRoleSessionPolicyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(assumeRoleSessionPolicyFindButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(assumeRoleSessionPolicyReplaceButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(assumeRoleSessionPolicyReplaceAllButton, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                            .addComponent(assumeRoleSessionPolicyReplacementField)
                            .addComponent(assumeRoleSessionPolicyRegexField)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        assumeRoleSessionPolicyPanelLayout.setVerticalGroup(
            assumeRoleSessionPolicyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(assumeRoleSessionPolicyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(assumeRoleSessionPolicyConfigurationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(assumeRoleSessionPolicyDescriptionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(assumeRoleSessionPolicyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(assumeRoleSessionPolicyScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                    .addGroup(assumeRoleSessionPolicyPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(5, 5, 5)
                        .addComponent(assumeRoleSessionPolicyRegexField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(assumeRoleSessionPolicyReplacementField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(assumeRoleSessionPolicyFindButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(assumeRoleSessionPolicyReplaceButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(assumeRoleSessionPolicyReplaceAllButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(assumeRoleSessionPolicyPrettifyButton))
        );

        javax.swing.GroupLayout assumeRolePanelLayout = new javax.swing.GroupLayout(assumeRolePanel);
        assumeRolePanel.setLayout(assumeRolePanelLayout);
        assumeRolePanelLayout.setHorizontalGroup(
            assumeRolePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(assumeRolePanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(assumeRolePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(assumeRoleConfigurationLabel)
                    .addGroup(assumeRolePanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(assumeRolePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(assumeRolePanelLayout.createSequentialGroup()
                                .addGroup(assumeRolePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(assumeRoleDurationLabel)
                                    .addComponent(assumeRoleExternalIdLabel))
                                .addGap(10, 10, 10)
                                .addGroup(assumeRolePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(assumeRoleExternalIdTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(assumeRoleSessionNameTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(assumeRoleRoleArnTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(assumeRoleDurationTextField)
                                    .addComponent(assumeRoleAssumerProfileComboBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(assumeRoleSessionNameLabel)
                            .addComponent(assumeRoleAssumerProfileLabel)
                            .addComponent(assumeRoleRoleArnLabel))))
                .addContainerGap(778, Short.MAX_VALUE))
            .addGroup(assumeRolePanelLayout.createSequentialGroup()
                .addComponent(assumeRoleSessionPolicyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 678, Short.MAX_VALUE))
        );
        assumeRolePanelLayout.setVerticalGroup(
            assumeRolePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(assumeRolePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(assumeRoleConfigurationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(assumeRolePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assumeRoleAssumerProfileLabel)
                    .addComponent(assumeRoleAssumerProfileComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(assumeRolePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assumeRoleRoleArnLabel)
                    .addComponent(assumeRoleRoleArnTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(assumeRolePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assumeRoleSessionNameLabel)
                    .addComponent(assumeRoleSessionNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(assumeRolePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assumeRoleExternalIdLabel)
                    .addComponent(assumeRoleExternalIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(assumeRolePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assumeRoleDurationLabel)
                    .addComponent(assumeRoleDurationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(assumeRoleSessionPolicyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        credentialCardContainerPanel.add(assumeRolePanel, "assume_role_card");

        commandPanel.setName(""); // NOI18N

        commandConfigurationLabel.setFont(commandConfigurationLabel.getFont().deriveFont(commandConfigurationLabel.getFont().getStyle() | java.awt.Font.BOLD, 15));
        commandConfigurationLabel.setForeground(new java.awt.Color(255, 102, 51));
        commandConfigurationLabel.setText("Command Configuration");

        commandConfigurationDescriptionLabel.setText("<html>The provided command will be executed to obtain credentials for request signing, as required. If a <i>Duration</i> value is provided, the credentials will considered valid for that duration. If a <i>Duration</i> value is not provided, the credentials will be cached for 60 minutes. If the <i>Duration</i> value is value is 0, then the command will be executed before each request. The extension will attempt to identify and extract the first valid Access Key, Secret Key and Session Token in the command stdout output.");
        commandConfigurationDescriptionLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        commandConfigurationDescriptionLabel.setPreferredSize(new java.awt.Dimension(500, 14));
        commandConfigurationDescriptionLabel.putClientProperty("html.disable", null);

        commandCommandLabel.setFont(commandCommandLabel.getFont().deriveFont(commandCommandLabel.getFont().getStyle() | java.awt.Font.BOLD, commandCommandLabel.getFont().getSize()+1));
        commandCommandLabel.setText("Command:");
        commandCommandLabel.setToolTipText("The command to be executed to fetch credentials.");

        commandCommandTextField.setToolTipText("The command to be executed to fetch credentials.");

        commandDurationLabel.setFont(commandDurationLabel.getFont().deriveFont(commandDurationLabel.getFont().getStyle() | java.awt.Font.BOLD, commandDurationLabel.getFont().getSize()+1));
        commandDurationLabel.setText("Duration (Seconds):");
        commandDurationLabel.setToolTipText("The lifetime of the session. The credentials will be renewed as required.");

        commandDurationTextField.setToolTipText("The lifetime of the credentials returned by the command. The credentials will be renewed as required.");

        commandExtractedSectionLabel.setFont(commandExtractedSectionLabel.getFont().deriveFont(commandExtractedSectionLabel.getFont().getStyle() | java.awt.Font.BOLD, 15));
        commandExtractedSectionLabel.setForeground(new java.awt.Color(255, 102, 51));
        commandExtractedSectionLabel.setText("Extracted Credentials");

        commandExtractedSectionDescriptionLabel.setText("<html>Click the <i>Test Profile Credentials</i> button above to test the provided command, credential extraction and the credentials' validity. The most recently extracted credentials are shown below.");
        commandExtractedSectionDescriptionLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        commandExtractedSectionDescriptionLabel.setPreferredSize(new java.awt.Dimension(500, 14));
        commandExtractedSectionDescriptionLabel.putClientProperty("html.disable", null);

        commandExtractedAccessKeyLabel.setFont(commandExtractedAccessKeyLabel.getFont().deriveFont(commandExtractedAccessKeyLabel.getFont().getStyle() | java.awt.Font.BOLD, commandExtractedAccessKeyLabel.getFont().getSize()+1));
        commandExtractedAccessKeyLabel.setLabelFor(commandExtractedAccessKeyTextField);
        commandExtractedAccessKeyLabel.setText("Access Key:");
        commandExtractedAccessKeyLabel.setToolTipText("The most recently extracted access key.");

        commandExtractedAccessKeyTextField.setEditable(false);
        commandExtractedAccessKeyTextField.setToolTipText("The most recently extracted access key.");

        commandExtractedSecretKeyLabel.setFont(commandExtractedSecretKeyLabel.getFont().deriveFont(commandExtractedSecretKeyLabel.getFont().getStyle() | java.awt.Font.BOLD, commandExtractedSecretKeyLabel.getFont().getSize()+1));
        commandExtractedSecretKeyLabel.setLabelFor(commandExtractedSecretKeyTextField);
        commandExtractedSecretKeyLabel.setText("Secret Key:");
        commandExtractedSecretKeyLabel.setToolTipText("The most recently extracted secret key.");

        commandExtractedSecretKeyTextField.setEditable(false);
        commandExtractedSecretKeyTextField.setToolTipText("The most recently extracted secret key.");

        commandExtractedSessionTokenLabel.setFont(commandExtractedSessionTokenLabel.getFont().deriveFont(commandExtractedSessionTokenLabel.getFont().getStyle() | java.awt.Font.BOLD, commandExtractedSessionTokenLabel.getFont().getSize()+1));
        commandExtractedSessionTokenLabel.setLabelFor(commandExtractedSessionTokenTextField);
        commandExtractedSessionTokenLabel.setText("Session Token:");
        commandExtractedSessionTokenLabel.setToolTipText("The most recently extracted session token.");

        commandExtractedSessionTokenTextField.setEditable(false);
        commandExtractedSessionTokenTextField.setToolTipText("The most recently extracted session token.");

        javax.swing.GroupLayout commandPanelLayout = new javax.swing.GroupLayout(commandPanel);
        commandPanel.setLayout(commandPanelLayout);
        commandPanelLayout.setHorizontalGroup(
            commandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(commandPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(commandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(commandConfigurationLabel)
                    .addGroup(commandPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(commandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(commandExtractedSectionLabel)
                            .addGroup(commandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(commandConfigurationDescriptionLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 684, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, commandPanelLayout.createSequentialGroup()
                                    .addGroup(commandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(commandDurationLabel)
                                        .addComponent(commandCommandLabel))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(commandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(commandCommandTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE)
                                        .addComponent(commandDurationTextField))))
                            .addGroup(commandPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(commandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(commandExtractedSectionDescriptionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE)
                                    .addGroup(commandPanelLayout.createSequentialGroup()
                                        .addGroup(commandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(commandExtractedSessionTokenLabel)
                                            .addComponent(commandExtractedSecretKeyLabel)
                                            .addComponent(commandExtractedAccessKeyLabel))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(commandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(commandExtractedSecretKeyTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 567, Short.MAX_VALUE)
                                            .addComponent(commandExtractedAccessKeyTextField)
                                            .addComponent(commandExtractedSessionTokenTextField))))))))
                .addContainerGap(781, Short.MAX_VALUE))
        );
        commandPanelLayout.setVerticalGroup(
            commandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(commandPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(commandConfigurationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(commandConfigurationDescriptionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(commandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(commandCommandLabel)
                    .addComponent(commandCommandTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(commandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(commandDurationLabel)
                    .addComponent(commandDurationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(commandExtractedSectionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(commandExtractedSectionDescriptionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(commandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(commandExtractedAccessKeyLabel)
                    .addComponent(commandExtractedAccessKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(commandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(commandExtractedSecretKeyLabel)
                    .addComponent(commandExtractedSecretKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(commandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(commandExtractedSessionTokenLabel)
                    .addComponent(commandExtractedSessionTokenTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(342, Short.MAX_VALUE))
        );

        credentialCardContainerPanel.add(commandPanel, "command_card");

        javax.swing.GroupLayout profileConfigurationPanelLayout = new javax.swing.GroupLayout(profileConfigurationPanel);
        profileConfigurationPanel.setLayout(profileConfigurationPanelLayout);
        profileConfigurationPanelLayout.setHorizontalGroup(
            profileConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(profileConfigurationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(profileConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(profileConfigurationPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(profileConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(profileConfigurationPanelLayout.createSequentialGroup()
                                .addComponent(profileStatusLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(profileStatusTextLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 637, Short.MAX_VALUE))
                            .addGroup(profileConfigurationPanelLayout.createSequentialGroup()
                                .addGroup(profileConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(profileServiceLabel)
                                    .addComponent(profileKeyIdLabel)
                                    .addComponent(profileRegionLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(profileConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(profileServiceTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 625, Short.MAX_VALUE)
                                    .addComponent(profileRegionTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(profileKeyIdTextField)))
                            .addGroup(profileConfigurationPanelLayout.createSequentialGroup()
                                .addComponent(profileEnabledCheckbox)
                                .addGap(18, 18, 18)
                                .addComponent(profileInScopeOnlyCheckbox))
                            .addComponent(testProfileButton)))
                    .addGroup(profileConfigurationPanelLayout.createSequentialGroup()
                        .addComponent(profileConfigurationLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(profileNameLabel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(credentialCardContainerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        profileConfigurationPanelLayout.setVerticalGroup(
            profileConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(profileConfigurationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(profileConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(profileConfigurationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(profileNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(profileConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(profileStatusLabel)
                    .addComponent(profileStatusTextLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(profileConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(profileEnabledCheckbox)
                    .addComponent(profileInScopeOnlyCheckbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(profileConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(profileRegionLabel)
                    .addComponent(profileRegionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(profileConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(profileServiceLabel)
                    .addComponent(profileServiceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(profileConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(profileKeyIdLabel)
                    .addComponent(profileKeyIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(testProfileButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(credentialCardContainerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        profileConfigurationScrollPane.setViewportView(profileConfigurationPanel);

        javax.swing.GroupLayout rightSideParentPanelLayout = new javax.swing.GroupLayout(rightSideParentPanel);
        rightSideParentPanel.setLayout(rightSideParentPanelLayout);
        rightSideParentPanelLayout.setHorizontalGroup(
            rightSideParentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightSideParentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(profileConfigurationScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        );
        rightSideParentPanelLayout.setVerticalGroup(
            rightSideParentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(profileConfigurationScrollPane)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(globalSettingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(profileManagementDescriptionLabel)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(profileManagementLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(deleteProfileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(importProfilesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(copyProfileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(exportProfilesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(addProfileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(profileListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(6, 6, 6)))
                .addComponent(rightSideParentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(globalSettingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rightSideParentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(profileManagementLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(profileManagementDescriptionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addProfileButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteProfileButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(copyProfileButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(importProfilesButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(exportProfilesButton))
                            .addComponent(profileListScrollPane))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        LogWriter.logDebug("Grabbing focus for top-level panel.");
        this.requestFocusInWindow();
    }//GEN-LAST:event_formMouseClicked

    private void assumeRoleSessionPolicyReplacementFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assumeRoleSessionPolicyReplacementFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_assumeRoleSessionPolicyReplacementFieldActionPerformed

    private void assumeRoleSessionPolicyRegexFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assumeRoleSessionPolicyRegexFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_assumeRoleSessionPolicyRegexFieldActionPerformed

    private void assumeRoleSessionPolicyReplaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assumeRoleSessionPolicyReplaceButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_assumeRoleSessionPolicyReplaceButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton addProfileButton;
    public javax.swing.JComboBox<String> alwaysSignWithProfileComboBox;
    private javax.swing.JLabel alwaysSignWithProfileLabel;
    public javax.swing.JComboBox<String> assumeRoleAssumerProfileComboBox;
    private javax.swing.JLabel assumeRoleAssumerProfileLabel;
    private javax.swing.JLabel assumeRoleConfigurationLabel;
    private javax.swing.JLabel assumeRoleDurationLabel;
    public javax.swing.JTextField assumeRoleDurationTextField;
    private javax.swing.JLabel assumeRoleExternalIdLabel;
    public javax.swing.JTextField assumeRoleExternalIdTextField;
    public javax.swing.JPanel assumeRolePanel;
    private javax.swing.JLabel assumeRoleRoleArnLabel;
    public javax.swing.JTextField assumeRoleRoleArnTextField;
    private javax.swing.JLabel assumeRoleSessionNameLabel;
    public javax.swing.JTextField assumeRoleSessionNameTextField;
    private javax.swing.JLabel assumeRoleSessionPolicyConfigurationLabel;
    private javax.swing.JLabel assumeRoleSessionPolicyDescriptionLabel;
    public javax.swing.JButton assumeRoleSessionPolicyFindButton;
    private javax.swing.JPanel assumeRoleSessionPolicyPanel;
    public javax.swing.JButton assumeRoleSessionPolicyPrettifyButton;
    public javax.swing.JTextField assumeRoleSessionPolicyRegexField;
    public javax.swing.JButton assumeRoleSessionPolicyReplaceAllButton;
    public javax.swing.JButton assumeRoleSessionPolicyReplaceButton;
    public javax.swing.JTextField assumeRoleSessionPolicyReplacementField;
    private javax.swing.JScrollPane assumeRoleSessionPolicyScrollPane;
    public javax.swing.JTextArea assumeRoleSessionPolicyTextArea;
    private javax.swing.JLabel commandCommandLabel;
    public javax.swing.JTextField commandCommandTextField;
    private javax.swing.JLabel commandConfigurationDescriptionLabel;
    private javax.swing.JLabel commandConfigurationLabel;
    private javax.swing.JLabel commandDurationLabel;
    public javax.swing.JTextField commandDurationTextField;
    private javax.swing.JLabel commandExtractedAccessKeyLabel;
    public javax.swing.JTextField commandExtractedAccessKeyTextField;
    private javax.swing.JLabel commandExtractedSecretKeyLabel;
    public javax.swing.JTextField commandExtractedSecretKeyTextField;
    private javax.swing.JLabel commandExtractedSectionDescriptionLabel;
    private javax.swing.JLabel commandExtractedSectionLabel;
    private javax.swing.JLabel commandExtractedSessionTokenLabel;
    public javax.swing.JTextField commandExtractedSessionTokenTextField;
    public javax.swing.JPanel commandPanel;
    public javax.swing.JButton copyProfileButton;
    public javax.swing.JPanel credentialCardContainerPanel;
    public javax.swing.JButton deleteProfileButton;
    public javax.swing.JButton exportProfilesButton;
    private javax.swing.JLabel globalSettingsDescriptionLabel;
    private javax.swing.JLabel globalSettingsLabel;
    public javax.swing.JPanel globalSettingsPanel;
    private javax.swing.JSeparator globalSettingsSeparator;
    public javax.swing.JButton importProfilesButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    public javax.swing.JComboBox<String> logLevelComboBox;
    private javax.swing.JLabel logLevelLabel;
    private javax.swing.JLabel profileConfigurationLabel;
    public javax.swing.JPanel profileConfigurationPanel;
    public javax.swing.JScrollPane profileConfigurationScrollPane;
    public javax.swing.JCheckBox profileEnabledCheckbox;
    public javax.swing.JCheckBox profileInScopeOnlyCheckbox;
    private javax.swing.JLabel profileKeyIdLabel;
    public javax.swing.JTextField profileKeyIdTextField;
    public javax.swing.JList<String> profileList;
    public javax.swing.JScrollPane profileListScrollPane;
    private javax.swing.JLabel profileManagementDescriptionLabel;
    private javax.swing.JLabel profileManagementLabel;
    public javax.swing.JLabel profileNameLabel;
    private javax.swing.JLabel profileRegionLabel;
    public javax.swing.JTextField profileRegionTextField;
    private javax.swing.JLabel profileServiceLabel;
    public javax.swing.JTextField profileServiceTextField;
    private javax.swing.JLabel profileStatusLabel;
    public javax.swing.JLabel profileStatusTextLabel;
    public javax.swing.JPanel rightSideParentPanel;
    public javax.swing.JCheckBox signingEnabledCheckbox;
    private javax.swing.JLabel staticAccessKeyLabel;
    public javax.swing.JTextField staticAccessKeyTextField;
    private javax.swing.JLabel staticCredentialsConfigurationLabel;
    public javax.swing.JPanel staticCredentialsPanel;
    private javax.swing.JLabel staticSecretKeyLabel;
    public javax.swing.JTextField staticSecretKeyTextField;
    private javax.swing.JLabel staticSessionTokenLabel;
    public javax.swing.JTextField staticSessionTokenTextField;
    public javax.swing.JButton testProfileButton;
    // End of variables declaration//GEN-END:variables
}
